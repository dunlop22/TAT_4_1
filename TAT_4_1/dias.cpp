#include "dias.h"




void dias::S()
{
/*	ПРОГРАММА
* 
* S = 
			--------
	   |---|	D	|---|		Описание данных
	   |	--------	|
	   |	--------	|
	   |---|	I	|---|		Описание класса
	   |	--------	|
	   |	--------	|
	   |---|	F	|---|		Функция
	   |    --------    |
	   |				|
	   \/				|
------------------------------->
*/
	LEX lex;
	int type;
	int uk1;
	
	uk1 = scan->GetUK();
	type = scan->FScaner(lex);

	while (type == TBool || type == TDouble)
	{

		uk1 = scan->GetUK();
		type = scan->FScaner(lex);


		scan->PutUK(uk1);

		if (type == TMain)
		{
			F();
		}
		else if (type == TIdent)
		{
			type = scan->FScaner(lex);

			if (type == TLS)
			{
				F();
			}
			else if (type = TClass)
			{
				I();
			}
			else
			{
				D();
			}
		}
		else
		{
			scan->PrintError("Ожидался идентификатор", lex, '\0');
		}

		uk1 = scan->GetUK();
		type = scan->FScaner(lex);
	}
}

void dias::D()
{
	/* ОПИСАНИЕ ДАННЫХ
	* D =

			-------------  ,  ------------------
		   |									|
		   \/									|
	------------  a  ---------------------------------  ;  ------>
						|					|
						|					|
						|	     --------	|
						|-  =  --|	Q	|---|		Функция
								 --------


	*/

	LEX lex;
	int type;
	int uk1;

	do
	{
		type = scan->FScaner(lex);

		if (type != TIdent)
		{
			scan->PrintError("Ожидался идентификатор", lex, '\0');
		}

		uk1 = scan->GetUK();
		type = scan->FScaner(lex);

		if (type == TSave)
		{
			Q();

			uk1 = scan->GetUK();
			type = scan->FScaner(lex);
		}

	} while (type == TZapya);	//,

	if (type != TTochkaZap)		//;
	{
		scan->PrintError("Ожидался символ ';'", lex, '\0');
	}
}


void dias::F()
/*	Функция
			Имя
		 -------
	  --|   B   |--
	 |	 -------   |				Составной оператор	
	 |			   |					 -------
-----|			   |---  (  ---  )  ----|   K   |---->
	 |			   |					 -------
	  ---  main  --				 
*/
{
	LEX lex;
	int type;
	int uk1;

	type = scan->FScaner(lex);

	
	if (type != TMain)
	{
		B();
	}

	type = scan->FScaner(lex);

	if (type != TLS)
	{
		scan->PrintError("Ожидался символ '('", lex, '\0');
	}

	type = scan->FScaner(lex);

	if (type != TRS)
	{
		scan->PrintError("Ожидался символ ')'", lex, '\0');
	}

	K();
}

void dias::K()
{
/*
СОСТАВНОЙ ОПЕРАТОР
				 -------
			----|	D	|---		Описание данных
		   |	 --------	|
		   |	 -------	|
		   |----|	I	|---|		Описание класса
		   |	 -------	|
		   |	 -------	|
		   |----|	M	|---|		
		   |     -------	|
		   |				|
		   \/				|
---  {  ------------------------  }  --->


*/
}
void dias::M()
{
/*
						 -------
		 ---------------|	K	|-------------------
		|				 -------					|
		|											|
		|				 -------					|
		|---------------|	N	|-------------------|
		|				 -------					|
		|											|
--------|				 -------					|
		|		 -------|	O	|-----------		|
		|		|		 -------			|		|
		|		|							|		|
		|		|				 -------	|		|
		 -------|-  return  ----|	Q	|---|-------|
				|				 -------	|
				|							|
				 ---------------------------
*/
}


void dias::H()
{
/*
return
					 -------
------  return  ----|	Q	| ------>
					 -------
*/
}


void dias::N()
{
/*
if
																		 -------
														 ----  else  ---|	M	|---
														|				 -------	|
														|							|
						 -------			 -------	\/							|
-----  if  ---  (  -----|	Q	|---  )  ---|	M	|--------------------------------------->
						 -------			 -------
*/
}

void dias::O()
{
/*
ПРИСВАИВАНИЕ
		 -------			 -------
 -------|	B	|---  =  ---|	Q	|----->
		 -------			 -------
		   Имя				Выражение
		 
*/
	B();
	LEX lex;
	int type;

	type = scan->FScaner(lex);

	if (type != TSave)
	{
		scan->PrintError("Ожидался знак \"+\"", lex, '\0');
	}

	Q();
}


void dias::Q()
{
/*
ВЫРАЖЕНИЕ
		 -----  |  -----
		|				|
		\/	 -------	|
 -----------|	R	|----------->
			 -------
			   XOR
*/

}

void dias::R()
{
/*
XOR
		 -----  ^  -----
		|				|
		\/	 -------	|
 -----------|	U	|----------->
			 -------
				И
*/
}
void dias::V()
{
/*
РАВЕНСТВО
		 -----  ==  ----
		|				|
		|-----  !=  ----|
		|				|
		\/	 -------	|
 -----------|	W	|----------->
			 -------

*/
}

void dias::U()
{
/*
И
		 -----  &  -----
		|				|
		\/	 -------	|
 -----------|	V	|----------->
			 -------
			Равенство
*/
}


void dias::W()
{
/*
СРАВНЕНИЕ
		 -----  <  -----
		|				|
		|-----  >  -----|
		|				|
		|-----  <= -----|
		|				|
		|-----  >= -----|
		|				|
		\/	 -------	|
 -----------|	X	|----------->
			 -------
		    Слагаемое
*/
}


void dias::X()
{
/*
СЛАГАЕМОЕ
		 -----  +  -----
		|				|
		|-----  -  -----|
		|				|
		\/	 -------	|
 -----------|	Y	|----------->
			 -------
		    Множитель
*/
}

void dias::Y()
{
/*
МНОЖИТЕЛЬ
		 -----  *  -----
		|				|
		|-----  /  -----|
		|				|
		|-----  %  -----|
		|				|
		\/	 -------	|
 -----------|	Z	|----------->
			 -------
			Со знаком
*/

}
void dias::Z()
{
/*						
							 -------
						 ---|	B	|---
						|	 -------	|
						|				|
						|---   с1   ----|
	 ---  +  ---		|				|
	|			|		|---   с2   ----|		
	|			|		|				|
----|-----------|-------|---  true  ----|--------->
	|			|		|				|
	|			|		|---  false ----|
	 ---  -  ---		|				|
						|	 -------	|
						|---|	P	|---|
						|	 -------	|
						|				|
						|	 -------	|
						 -(-|	Q	|-)-
							 -------
*/
}





void dias::P()
{
/*
ВЫЗОВ ФУНКЦИИ
			   Имя
			 -------
		 ---|	B	|---
		|	 -------	|
		|				|
 -------|				|---  (  ----  )  ---->
		|				|
		 ---  main  ----

*/

}

void dias::B()
{
/*
Имя
		 -----  .  -----
		|				|
		|				|
		\/				|
--------------  a  ------------>
*/
}